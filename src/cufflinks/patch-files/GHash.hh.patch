--- GHash.hh	2017-08-16 15:29:11.000000000 -0700
+++ patch-files/GHash.hh	2017-08-16 15:31:01.000000000 -0700
@@ -88,7 +88,7 @@
                                 //nextkey is SET to the corresponding key
   GHashEntry* NextEntry() { //returns a pointer to a GHashEntry
   	 register int pos=fCurrentEntry;
-  	 while (pos<fCapacity && hash[pos].hash<0) pos++;
+  	 while (pos<fCapacity && 0 > hash[pos].hash) pos++;
   	 if (pos==fCapacity) {
   	                 fCurrentEntry=fCapacity;
   	                 return NULL;
@@ -186,7 +186,7 @@
         x=HASH2(h,n);
         GASSERT(1<=x && x<n);
         while(k[p].hash!=-1) p=(p+x)%n;
-        GASSERT(k[p].hash<0);
+        GASSERT(0 > k[p].hash);
         k[p]=hash[i];
         }
       }
@@ -225,7 +225,7 @@
   GTRACE(("GHash::insert: key=\"%s\"\n",ky));
   //GMessage("GHash::insert: key=\"%s\"\n",ky);
   GASSERT(0<=i && i<fCapacity);
-  GASSERT(hash[i].hash<0);
+  GASSERT(0 > hash[i].hash);
   hash[i].hash=h;
   hash[i].mark=mrk;
   hash[i].key=Gstrdup(ky);
@@ -266,7 +266,7 @@
   GTRACE(("GHash::insert: key=\"%s\"\n",ky));
   //GMessage("GHash::insert: key=\"%s\"\n",ky);
   GASSERT(0<=i && i<fCapacity);
-  GASSERT(hash[i].hash<0);
+  GASSERT(0 > hash[i].hash);
   hash[i].hash=h;
   hash[i].mark=mrk;
   hash[i].key=(char *)ky;
@@ -310,7 +310,7 @@
   if(i==-1) i=p;
   GTRACE(("GHash::replace: %08x: inserting: \"%s\"\n",this,ky));
   GASSERT(0<=i && i<fCapacity);
-  GASSERT(hash[i].hash<0);
+  GASSERT(0 > hash[i].hash);
   hash[i].hash=h;
   hash[i].mark=mrk;
   hash[i].key=Gstrdup(ky);
@@ -412,7 +412,7 @@
 
 template <class OBJ> char* GHash<OBJ>::NextKey() {
  register int pos=fCurrentEntry;
- while (pos<fCapacity && hash[pos].hash<0) pos++;
+ while (pos<fCapacity && 0 > hash[pos].hash) pos++;
  if (pos==fCapacity) {
                  fCurrentEntry=fCapacity;
                  return NULL;
@@ -425,7 +425,7 @@
 
 template <class OBJ> OBJ* GHash<OBJ>::NextData() {
  register int pos=fCurrentEntry;
- while (pos<fCapacity && hash[pos].hash<0) pos++;
+ while (pos<fCapacity && 0 > hash[pos].hash) pos++;
  if (pos==fCapacity) {
                  fCurrentEntry=fCapacity;
                  return NULL;
@@ -439,7 +439,7 @@
 
 template <class OBJ> OBJ* GHash<OBJ>::NextData(char* &nextkey) {
  register int pos=fCurrentEntry;
- while (pos<fCapacity && hash[pos].hash<0) pos++;
+ while (pos<fCapacity && 0 > hash[pos].hash) pos++;
  if (pos==fCapacity) {
                  fCurrentEntry=fCapacity;
                  nextkey=NULL;
